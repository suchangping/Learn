・プロトコル　：协议
・RFC ：Request for comments 一系列以编号排定的文件
  Request For Comments（RFC），是一系列以编号排定的文件。文件收集了有关互联网相关信息，
  以及UNIX和互联网社区的软件文件。RFC文件是由Internet Society（ISOC）赞助发行。
  基本的互联网通信协议都有在RFC文件内详细说明。RFC文件还额外加入许多在标准内的论题，
  例如对于互联网新开发的协议及发展中所有的记录。因此几乎所有的互联网标准都有收录在RFC文件之中。
・HTTP：ハイパーテキストの転送用プロトコル

・rest （一种软件架构风格）EST即表述性状态传递（英文：Representational State Transfer，简称REST）
  是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。
  它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。
・ステートレスサーバ：　无状态服务器
・TCP/IP　：TCP　Transmission Control Protocol　　IP　Internet Protocol
　インターネットの基盤を構成する重要なネットワークプロトコルです。
 ・ケープル：电缆
 ・ネットワークアダプタ：网络适配器
 ・トランスポート　传输层
 ・インターネット　网络层
 ・切断　せつだん
 ・ヘッダ　header
 ・チャンク　大量的，大块，厚
 ・コンテント　目录，要旨
 ・WEB　アーキテクチャスタイルにクライアント/サーバを採用しています。
 ・すなわち 那是
 ・提供　ていきょう
 ・返答　へんとう
 ・クライアント（Web ブラウザ）が情報を提供するサーバ（Webサーバ）に接続し、各種のリクエスト（Request、要求）を出してレスポンス（Response、返答）を受け取ります。
 ・ユーザエージェント　user agent
 ・同期型　Synchronous
 ・解析　かいせき
 ・パフォーマンス　性能 特性，
 ・CRUD　クラッド　create ,read update delete
 ・テキストフレーズ 文字词组
 ・コンポーネント　成分 组件 
 ・責務　せきむ
 ・なぜなら　因为
 ・URL：是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。
 ・URI：uniform resource identifier , 统一资源标识符，用来唯一的标识一个资源。
 ・Location响应头指示URL的页面重定向到。它仅在提供3xx状态响应时才提供意义。
　　用于使新请求获取指向的页面的 HTTP 方法Location取决于原始方法和重定向类型：
   如果303（另请参见）响应始终导致使用GET方法，307（临时重定向）和308（永久重定向）不会更改原始请求中使用的方法;
  301（永久重定向）和302（找到）不会改变大部分时间的方法，虽然较老的用户代理可能（所以你基本上不知道）
  
・GET      请求指定的页面信息，并返回实体主体。
・HEAD     类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头
・POST     向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。
・PUT      从客户端向服务器传送的数据取代指定的文档的内容。
・DELETE      请求服务器删除指定的页面。
・CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。 OPTIONS 允许客户端查看服务器的性能。 TRACE 回显服务器收到的请求，主要用于测试或诊断。 

・所有使用这些状态码的响应都会发送一个Location标题。
・除重定向响应之外，具有201（创建）状态的消息还包含Location标题。它表示新创建的资源的 URL。
・Location和Content-Location不同：Location指示重定向的目标（或新创建的资源的 URL），
　而Content-Location指示在内容协商发生时用于访问资源的直接 URL，而不需要进一步的内容协商。
  Location是与响应关联的头部，Content-Location与返回的实体关联。
 
HTTP请求方法
根据HTTP标准，HTTP请求可以使用多种请求方法。
HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。
HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。
 
 
層	  名称	             規格（プロトコル）	               概要	                   利用例
7層	アプリケーション層	   HTTP,FTP,DNS,SMTP,POPなど	     個々のアプリケーション    www,メール
6層	プレゼンテーション層	SMTP,FTP,Telnetなど	            データの表現形式	       HTML
5層	セッション層	       TLS,NetBIOSなど	               通信手段	               HTTPS
4層	トランスポート層	    TCP,UDP,NetWare/IPなど	       エンド間の通信制御	      TCP,UDP
3層	ネットワーク層	      IP,ARP,RARP,ICMPなど	          データを送る相手を決め最適な経路で送信	IP
2層	データリンク層	      PPP,Ethernetなど	              隣接する機器同士の通信を実現	Ethernet
1層	物理層	             RS-232,UTP,無線	               物理的な接続、電気信号	     UTPケーブル,光ファイバーケーブル


